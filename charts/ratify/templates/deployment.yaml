{{- $dockerAuthMode := or .Values.dockerConfig .Values.registryCredsSecret -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "ratify.fullname" . }}
  labels:
    {{- include "ratify.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "ratify.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "ratify.selectorLabels" . | nindent 8 }}
        {{- if .Values.oras.authProviders.azureWorkloadIdentityEnabled }}
        azure.workload.identity/use: "true"
        {{- end }}
      annotations:
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
    spec:
      {{- if or .Values.azureWorkloadIdentity.clientId .Values.serviceAccount.create .Values.serviceAccount.name }}
      serviceAccountName: {{ include "ratify.serviceAccountName" . }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
            seccompProfile:
              type: RuntimeDefault
          command:
            - "/app/ratify"
          args:
            - "serve"
            - "--http"
            - ":6001"
            - "-c"
            - "/usr/local/ratify/config.json"
            - "--enable-crd-manager"
            - --cert-dir=/usr/local/tls
            {{- if (lookup "v1" "Secret" .Release.Namespace "gatekeeper-webhook-server-cert") }}
            - --ca-cert-file=usr/local/tls/client-ca/ca.crt
            {{- end }}
            - --cache-size={{ .Values.provider.cache.size }}
            - --cache-ttl={{ .Values.provider.cache.ttl }}
          ports:
            - containerPort: 6001
          volumeMounts:             
            {{- if .Values.cosign.enabled }}
            - mountPath: "/usr/local/ratify-certs/cosign"
              name: cosign-certs
              readOnly: true
            {{- end }}
            - mountPath: "/usr/local/ratify"
              name: config
              readOnly: true
              {{- if $dockerAuthMode }}
            - mountPath: "/usr/local/docker"
              name: dockerconfig
              readOnly: true
              {{- end }}
            - mountPath: /usr/local/tls
              name: tls
              readOnly: true
            {{- if (lookup "v1" "Secret" .Release.Namespace "gatekeeper-webhook-server-cert") }}
            - mountPath: /usr/local/tls/client-ca
              name: client-ca-cert
              readOnly: true
            {{- end }}
          env:
          {{- if .Values.logLevel }}
            - name: RATIFY_LOG_LEVEL
              value: {{ .Values.logLevel }}
          {{- end }}
          {{- if $dockerAuthMode }}
            - name: DOCKER_CONFIG
              value: "/usr/local/docker"
          {{- end }}
          {{- if .Values.oras.authProviders.azureManagedIdentityEnabled }}
            - name: AZURE_TENANT_ID
              value: {{ .Values.azureManagedIdentity.tenantId }}
          {{- end }}
          {{- if and .Values.oras.authProviders.awsEcrBasicEnabled .Values.oras.authProviders.awsApiOverride.enabled }}
            {{- if and .Values.oras.authProviders.awsApiOverride.endpoint .Values.oras.authProviders.awsApiOverride.partition .Values.oras.authProviders.awsApiOverride.region }}
            - name: AWS_API_OVERRIDE_ENDPOINT
              value: {{ .Values.oras.authProviders.awsApiOverride.endpoint }}
            - name: AWS_API_OVERRIDE_PARTITION
              value: {{ .Values.oras.authProviders.awsApiOverride.partition }}
            - name: AWS_API_OVERRIDE_REGION
              value: {{ .Values.oras.authProviders.awsApiOverride.region }}
            {{- end }}
          {{- end }}
            - name: RATIFY_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          {{- range $k, $v := .Values.featureFlags }}
            - name: {{ $k }}
              value: {{ $v | ternary 1 0 | quote }}
          {{- end}}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
        {{- if .Values.cosign.enabled }}
        - name: cosign-certs
          secret:
            secretName: {{ include "ratify.fullname" . }}-cosign-certificate
        {{- end }}
        {{- if $dockerAuthMode }}
        - name: dockerconfig
          secret:
            {{- if .Values.registryCredsSecret }}
            secretName: {{ .Values.registryCredsSecret }}
            {{- else }}
            secretName: {{ include "ratify.fullname" . }}-dockerconfig
            {{- end }}
            items:
              - key: .dockerconfigjson
                path: config.json
        {{- end }}        
        - name: config
          configMap:
            name: {{ include "ratify.fullname" . }}-configuration
        - name: tls
          secret:
            secretName: {{ include "ratify.fullname" . }}-tls
            items:
              - key: tls.key
                path: tls.key
              - key: tls.crt
                path: tls.crt
        {{- if (lookup "v1" "Secret" .Release.Namespace "gatekeeper-webhook-server-cert") }}
        - name: client-ca-cert
          secret:
            secretName: gatekeeper-webhook-server-cert
            items:
              - key: ca.crt
                path: ca.crt
        {{- end }}
